name: CD-deploy
on:
    push:
        branches:
            - develop
        
jobs:
    build-push-deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ap-northeast-2
            - uses: hashicorp/setup-terraform@v2
              with:
                terraform_wrapper: false
            
            # define the infrastructure 
            - name: TF plan
              id: tf-plan
              working-directory: "week6/infrastructure"
              run: |
                terraform init -backend-config="key=mlops-zoomcamp-prod.tfstate" --reconfigure
                terraform plan -var-file=vars/prod.tfvars

            - name: TF apply
              id: tf-apply
              working-directory: "week6/infrastructure"
              if: ${{ steps.tf-plan.outputs.exit_code == 0 }}
              run: |
                terraform apply -auto-approve -var-file=vars/prod.tfvars
                echo "::set-output name=ecr_repo::$(terraform output ecr_repo | xargs)"
                echo "::set-output name=predictions_stream_name::$(terraform output predictions_stream_name | xargs)"
                echo "::set-output name=model_bucket::$(terraform output model_bucket | xargs)"
                echo "::set-output name=lambda_function::$(terraform output lambda_function | xargs)"

            # build push
            - name: Login to AWS ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag and push image to AWS ECR
              id: build-image-step
              working-directory: "week6/"
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
                IMAGE_TAG: "latest"
              run: |
                docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
                docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                echo "::set-output name=image_uri::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

            # deploy
            - name: Get model artifacts
              id: get-model-artifacts
              working-directory: "week6/"
              env:
                MODEL_BUCKET_DEV: kade-mlflow-artifacts
                MODEL_BUCKET_PROD: ${{ steps.tf-apply.outputs.model_bucket }}
              run: |
                export RUN_ID=$(aws s3api list-objects-v2 --bucket ${{ env.MODEL_BUCKET_DEV }} \
                --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -f2 -d/)
                aws s3 sync s3://${MODEL_BUCKET_DEV} s3://${MODEL_BUCKET_PROD}
                echo "::set-output name=run_id::${RUN_ID}"

            - name: Update lambda
              env:
                LAMBDA_FUNCTION: ${{ steps.tf-apply.outputs.lambda_function }}
                PREDICTIONS_STREAM_NAME: ${{ steps.tf-apply.outputs.predictions_stream_name }}
                MODEL_BUCKET: ${{ steps.tf-apply.outputs.model_bucket }}
                RUN_ID: ${{ steps.get-model-artifacts.outputs.run_id }}
              run: |
                variables="{ \
                            PREDICTIONS_STREAM_NAME: ${PREDICTIONS_STREAM_NAME}, \
                            MODEL_BUCKET: ${MODEL_BUCKET}, \
                            RUN_ID: ${RUN_ID} \
                            }"

                STATE=$(aws lambda get-function --function-name ${LAMBDA_FUNCTION} --region ap-northeast-2 --query 'Configuration.LastUpdateStatus' --output text)
                    while [[ $STATE == "InProgress" ]]
                    do
                        echo "Waiting for the lambda to be updated..."
                        sleep 5
                        STATE=$(aws lambda get-function --function-name ${LAMBDA_FUNCTION} --region ap-northeast-2 --query 'Configuration.LastUpdateStatus' --output text)
                    done

                aws lambda update-function-configuration --function-name ${LAMBDA_FUNCTION} --environment "Variables=${variables}"